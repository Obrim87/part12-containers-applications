services:
  app:
    image: todo-frontend
    build:
      context: ./todo-frontend # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read. This is relative to the context path!!
    volumes:
      - ./todo-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
      # - /usr/src/app/node_modules # protects node_modules from being overwritten ** Run this if you get the Cannot Find Modules error. Also see Development in Containers at https://fullstackopen.com/en/part12/basics_of_orchestration#development-in-containers
    ports:
      - 5172:5172
    environment:
      VITE_BACKEND_URL: http://localhost:8081/api/
    container_name: todo-frontend-nginx
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8081:80
    container_name: todo-proxy
    depends_on:
      - app # wait for the frontend container to be started
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
  redis:
    image: redis
    command: ['redis-server', '--appendonly', 'yes']
    #command: ['redis-server', '--bind', 'redis', '--port', '8080']
    volumes:
      - ./todo-backend/redis_data:/data
    ports:
      - 8080:6379
  server:
    image: todo-backend-dev
    depends_on:
      - mongo
      - redis
    volumes:
      - ./todo-backend:/usr/src/app
    ports:
      - 5173:3000
    environment:
      REDIS_URL: redis://redis:6379
      MONGO_URL: mongodb://the_username:the_password@mongo:27017/the_database
  debug-helper:
    image: busybox
